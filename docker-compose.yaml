version: "3.8"

services:
  # Сервис базы данных PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: event-planner-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      # Монтируем локальную директорию для сохранения данных БД
      - postgres_volume:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Сервис очереди сообщений RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: event-planner-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      # Монтируем раздел для сохранения очереди после перезагрузки
      - rabbitmq_volume:/var/lib/rabbitmq
    ports:
      - "5672:5672" # AMQP порт
      - "15672:15672" # Management UI порт
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Основной сервис приложения
  app:
    build:
      context: ./app/
      dockerfile: Dockerfile
    image: event-planner-api:latest
    container_name: event-planner-app

    # Используем общий .env файл из корня проекта
    env_file:
      - .env

    # Дополнительные переменные окружения для Docker окружения
    environment:
      # Переопределяем хосты для Docker network
      - DB_HOST=database
      - RABBITMQ_HOST=rabbitmq

    volumes:
      # Подключаем исходные файлы через volumes для разработки
      - ./app:/app
      # Создаем директорию для логов
      - ./logs:/app/logs

    ports:
      # Пробрасываем порт приложения
      - "${APP_PORT}:${APP_PORT}"

    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

    networks:
      - app-network

    restart: unless-stopped

    # Команда запуска
    command: ["python", "main.py"]

  # Веб-прокси сервис на основе Nginx
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    image: event-planner-nginx:latest
    container_name: event-planner-nginx
    ports:
      # Пробрасываем порты наружу
      - "80:80"
      - "443:443"
    # Зависимость от сервиса app
    depends_on:
      - app
    networks:
      - app-network
    restart: unless-stopped
    volumes:
      # Можно добавить SSL сертификаты при необходимости
      # - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx

networks:
  app-network:
    driver: bridge
    name: event-planner-network

volumes:
  postgres_volume:
    name: event-planner-postgres
  rabbitmq_volume:
    name: event-planner-rabbitmq
